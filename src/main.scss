@use "variables" as *;
@use "mixins";
@use "popup-component";

*,
*::before,
*::after {
  box-sizing: border-box;
  /* Reset Margins/Padding */
  margin: 0;
  padding: 0;
}

html {
  font-size: $fs-base;
  font-family: "Manrope", sans-serif;
  font-weight: 500;
}

/* Styling */

h1 {
  font-weight: 700;
  font-size: $fs-xl;
}

.container {
  // Use flexbox mixin to create flexbox container
  // and uses its default behaviour to
  // center it vertically and horizontally
  @include mixins.flexbox($direction: column);

  background-color: $bg-color-base;
  // Use min-height to allow the container to grow if
  // content is taller than the viewport
  min-height: 100vh;
  padding: $space-md;
}

.article-preview {
  // Base Layout //
  // Creates flexbox card container with a column layout
  @include mixins.flexbox($direction: column);
  // Desktop Layout //
  @include mixins.breakpoint($breakpoint-desktop) {
    // From tablet to desktop, use a grid
    display: grid;
    grid-template-columns: 18rem 1fr;
    grid-template-areas:
      "header content"
      "header author-info";
    max-width: 50rem;
    // Allow the absolutely positioned popup to be
    // visible outside the card's bounds.
    overflow: visible;
  }

  // Set a max-width to match the mobile design
  max-width: 23.5rem;
  // Hides the parts of the child elements that overflow the card's rounded corners.
  overflow: hidden;

  // Use mixin to define card styling
  @include mixins.card-theme(
    $bg-color: $bg-color-card,
    $font-color: $primary-font-color,
    $border-radius: $border-radius-card,
    $padding: 0
  );

  filter: drop-shadow(0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.1));

  &__header {
    // Set a fixed height for the image container to control aspect ratio
    // Width required to be visible inside the parent flex container.
    width: 120%;
    height: 15rem;
    background-image: url("../images/drawers.jpg");
    background-size: cover;
    background-position: center;

    @include mixins.breakpoint($breakpoint-desktop) {
      grid-area: header;
      // On desktop, set the height to auto to allow the image to fill the card
      min-height: 100%;
      width: auto;
      // Apply border-radius directly to the image header on desktop,
      // as the parent's `overflow: visible` will not clip it.
      border-radius: $border-radius-card 0 0 $border-radius-card;
    }
  }

  &__content {
    padding: 2rem 2rem 1.25rem;

    // Desktop Layout //
    @include mixins.breakpoint($breakpoint-desktop) {
      grid-area: content;
    }
  }

  h1 {
    padding-bottom: $space-sm;
  }

  &__text {
    color: $secondary-font-color;
    line-height: 1.5;
  }
}

.author-info {
  // Add a positioning context for the absolute-positioned popup
  // Ensures popup is an overlay that replaces the author-info
  position: relative;
  // Use grid to layout the author info section
  display: grid;
  grid-template-columns: 1fr 4fr 1fr;
  grid-template-areas:
    "avatar author-name button"
    "avatar date        button";
  gap: 0 $space-sm;
  padding-inline: $space-sm;
  padding-block: $space-xs $space-lg;

  // Desktop Layout //
  @include mixins.breakpoint($breakpoint-desktop) {
    grid-area: author-info;
    grid-template-columns: 1fr 4fr 1fr;
    gap: 0;
    padding-left: $space-lg;
  }
  // Mobile Layout //
  &__avatar {
    grid-area: avatar;
    border-radius: $border-radius-circle;
    max-width: 3rem;
    align-self: center; // Center the avatar between the two rows
  }

  &__name {
    grid-area: author-name;
    color: $primary-font-color;
    font-weight: 700;
    align-self: end;
    font-size: $fs-md;
  }

  &__date {
    grid-area: date;
    color: $grayish-blue;
    font-size: $fs-md;
    align-self: start;
  }

  &__button {
    grid-area: button;
    align-self: center;
    border-radius: $border-radius-circle;
    background: $bg-color-base;
    border: none;
    width: 3rem;
    height: 3rem;
    transform: translate(-0.5rem, 0.5rem);
    // Use flexbox mixin with default parameters
    // centers the icon inside the button
    @include mixins.flexbox();
    // Places button below the share button to ensure the button is
    // clickable when the popup is active
    z-index: 2;
    transition: background-color 0.3s ease;

    &__share-icon {
      width: 1.25rem;
      height: 1.25rem;
    }

    // When share-button is clicked, author-info will be replaced by popup
    // until deactivated i.e. button is clicked again
    &.active {
      background: $secondary-font-color;
      .author-info__share-icon {
        filter: brightness(0) invert(1);
      }
    }
  }
}

.attribution {
  font-size: $fs-sm;
  text-align: center;
  padding-top: $space-md;

  &__link {
    color: $link-color;
  }
}
